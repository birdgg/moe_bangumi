// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider    = "zod-prisma"
  modelSuffix = "Schema"
  output      = "../../../packages/api/src/generated/zod"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Bangumi {
  id             Int       @id @default(autoincrement())
  nameRaw        String    @map("name_raw")
  nameZh         String?   @map("name_zh")
  nameJp         String?   @map("name_jp")
  nameEn         String?   @map("name_en")
  poster         String
  season         Int
  // 字幕组
  group          String?
  // 字幕
  sub            String?
  // 分辨率
  dpi            String?
  // 是否需要自动补全
  needEpsCollect Boolean   @map("need_eps_collect")
  isEpsCollected Boolean   @default(false) @map("is_eps_collected")
  savePath       String
  // related rss links, split by ,
  rssLink        String    @default("")
  // downloaded episodes split by ,
  episodes       String    @default("")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  deleted        Boolean   @default(false)
  Torrent        Torrent[]

  @@unique(name: "name_season", [nameZh, season])
  @@index([nameZh, season])
}

model RssItem {
  id        Int       @id @default(autoincrement())
  title     String
  url       String
  // 订阅模式
  aggregate Boolean
  enabled   Boolean
  Torrent   Torrent[]
}

model Torrent {
  id        Int      @id @default(autoincrement())
  name      String
  url       String   @unique
  bangumiId Int?
  bangumi   Bangumi? @relation(fields: [bangumiId], references: [id])
  rssItemId Int?
  rssItem   RssItem? @relation(fields: [rssItemId], references: [id])
}
